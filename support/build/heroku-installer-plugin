#!/usr/bin/env bash

# fail hard
set -o pipefail
# fail harder
set -eu

source "$(dirname "$BASH_SOURCE")/_util/include/manifest.sh"

OUT_PREFIX=$1

dep_formula=${0#$WORKSPACE_DIR/}
dep_name=$(basename "$BASH_SOURCE")
dep_build=${dep_formula#"${dep_name}-"}
dep_version=${dep_build%%+*} # strip build metadata off the end of the version
dep_package=${dep_name}-${dep_build}
dep_manifest=${dep_package}.composer.json

echo "-----> Packaging ${dep_name} (${dep_version})..."

# for PHP-min and Composer
export PATH="${OUT_PREFIX}/bin:$PATH"

installer_path="$(dirname "$BASH_SOURCE")/../installer"

# check that the version matches
composer -d "$installer_path" show --self --format=json | jq --arg version "$dep_version" --exit-status '.versions | any(. == $version)' >/dev/null || {
	echo "Failed to package ${dep_name}: formula version ${dep_version} does not match composer.json version field"
	exit 1
}

tempdir=$(mktemp -d)

# let Composer package up what we need
composer -d "$installer_path" archive --dir="$tempdir" --file=archive --format=tar

# wipe OUT_PREFIX (it contains PHP and Composer)
rm -rf "$OUT_PREFIX"
mkdir "$OUT_PREFIX"

tar -x -C "$OUT_PREFIX" -f "${tempdir}/archive.tar"

MANIFEST_REQUIRE="${MANIFEST_REQUIRE:-"{}"}"
MANIFEST_CONFLICT="${MANIFEST_CONFLICT:-"{}"}"
MANIFEST_REPLACE="${MANIFEST_REPLACE:-"{}"}"
MANIFEST_PROVIDE="${MANIFEST_PROVIDE:-"{}"}"
MANIFEST_EXTRA="${MANIFEST_EXTRA:-"{}"}"

# merge the generated manifest and the "real" manifest contents from the subdir composer.json (which has additional JSON keys like "autoload" and "extra")
jq -cjs 'reduce .[] as $obj ({}; . * $obj)' \
	"$OUT_PREFIX/composer.json" \
	<(python "$(dirname "$BASH_SOURCE")/_util/include/manifest.py" "composer-plugin" "heroku/installer-plugin" "$dep_build" "${dep_formula}.tar.gz" "$MANIFEST_REQUIRE" "$MANIFEST_CONFLICT" "$MANIFEST_REPLACE" "$MANIFEST_PROVIDE" "$MANIFEST_EXTRA") \
	> "$dep_manifest"

print_or_export_manifest_cmd "$(generate_manifest_cmd "$dep_manifest")"
