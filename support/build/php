#!/usr/bin/env bash
# Build Path: /app/.heroku/php/
# Build Deps: libraries/zlib, libraries/libmcrypt, libraries/icu, libraries/gettext

# fail hard
set -o pipefail
# fail harder
set -eu

source $(dirname $BASH_SOURCE)/_util/include/manifest.sh

OUT_PREFIX=$1

dep_formula=${0#$WORKSPACE_DIR/}
dep_name=$(basename $BASH_SOURCE)
dep_version=${VERSION}
dep_package=${dep_name}-${dep_version}
dep_dirname=php-${dep_version}
dep_archive_name=${dep_dirname}.tar.gz
if [[ $dep_version == *alpha* ]] || [[ $dep_version == *beta* ]] || [[ $dep_version == *RC* ]]; then
    if [[ $dep_version == 5.5.* ]]; then
        dep_url=http://downloads.php.net/~jpauli/${dep_archive_name}
    elif [[ $dep_version == 5.6.* ]]; then
        dep_url=http://downloads.php.net/~tyrael/${dep_archive_name}
    elif [[ $dep_version == 7.0.* ]]; then
        dep_url=https://downloads.php.net/~ab/${dep_archive_name}
    fi
else
    dep_url=http://us1.php.net/get/${dep_archive_name}/from/this/mirror
fi
dep_manifest=${dep_package}.composer.json

echo "-----> Building ${dep_package}..."

curl -L ${dep_url} | tar xz

pushd ${dep_dirname}

if echo -n $dep_version | python -c "import sys, pkg_resources; ver=pkg_resources.parse_version(sys.stdin.read()); sys.exit(ver >= pkg_resources.parse_version('5.6.0RC2') or ver >= pkg_resources.parse_version('5.5.17RC1'));"; then
    echo "-----> Applying https://github.com/php/php-src/pull/694..."
    curl -L https://github.com/php/php-src/pull/694.diff | patch -p1
fi

configureopts=
if [[ $dep_version == 7.* ]]; then
    configureopts="\
--with-mcrypt=shared,${OUT_PREFIX} \
--enable-opcache-file\
"
else
    configureopts="\
--with-mcrypt=${OUT_PREFIX} \
--with-mysql=shared \
"
fi

export PATH=${OUT_PREFIX}/bin:$PATH
# cannot be built shared: date, ereg, opcache (always), pcre, reflection, sockets (?), spl, standard,
# sqlite3 and pdo_sqlite are on by default but we're building them shared on purpose
LD_LIBRARY_PATH=${OUT_PREFIX} ./configure \
    --prefix=${OUT_PREFIX} \
    --with-config-file-path=/app/.heroku/php/etc/php \
    --with-config-file-scan-dir=/app/.heroku/php/etc/php/conf.d \
    --enable-fpm \
    --with-bz2 \
    --with-curl \
    --with-pdo-mysql \
    --with-mysqli \
    --with-openssl \
    --with-pgsql \
    --with-pdo-pgsql \
    --with-readline \
    --enable-sockets \
    --enable-zip \
    --with-zlib \
    --with-zlib-dir=${OUT_PREFIX} \
    --enable-bcmath=shared \
    --enable-calendar=shared \
    --enable-exif=shared \
    --enable-ftp=shared \
    --with-gd=shared \
        --enable-gd-native-ttf \
        --with-freetype-dir=/usr \
        --with-jpeg-dir=/usr \
        --with-png-dir=/usr \
    --with-gettext=shared,${OUT_PREFIX} \
    --enable-intl=shared \
    --enable-mbstring=shared \
    --enable-pcntl=shared \
    --enable-shmop=shared \
    --enable-soap=shared \
    --with-sqlite3=shared \
    --with-pdo-sqlite=shared \
    --with-xmlrpc=shared \
    --with-xsl=shared \
    $configureopts
make -s -j 9
make install -s
popd

echo "-----> Preparing PECL..."
${OUT_PREFIX}/bin/pecl channel-update pecl.php.net

echo "-----> Generating manifest..."
curl -sS https://getcomposer.org/installer | php
# enable all extensions
mkdir -p ${OUT_PREFIX}/etc/php/conf.d
shared=()
for f in ${OUT_PREFIX}/lib/php/extensions/*/*.so; do
    if [[ $(basename $f) == "opcache.so" ]]; then
        # opcache needs to be loaded using zend_extension
        echo -n "zend_" >> ${OUT_PREFIX}/etc/php/php.ini
    else
        # do not record opcache.so as shared; always on via php.ini
        shared+=("heroku-sys/ext-$(basename $f .so)")
    fi
    echo "extension=$(basename $f)" >> ${OUT_PREFIX}/etc/php/php.ini
done

extra=$(echo "${shared[@]}" | python -c 'import sys, json; json.dump({"shared": dict([item.split(":") if ":" in item else (item, True) for item in sys.stdin.read().split()]), "export": "bin/export.php.sh", "profile": "bin/profile.php.sh"}, sys.stdout)')

MANIFEST_REQUIRE="${MANIFEST_REQUIRE:-"{}"}"
MANIFEST_CONFLICT="${MANIFEST_CONFLICT:-"{\"heroku-sys/hhvm\":\"*\"}"}"
MANIFEST_EXTRA="${MANIFEST_EXTRA:-"$extra"}"
MANIFEST_REPLACE=$(php composer.phar show --platform | grep -E '^(ext-\S+|php-64bit\b|hhvm\b)' | tr -s " " | cut -d " " -f1,2 | sed -e "s/ $dep_version\$/ self.version/" -e 's/^/heroku-sys\//' | python -c 'import sys, json; json.dump(dict(item.split() for item in sys.stdin), sys.stdout)')

# remove temporary ini file that enables all extensions, and the composer download
rm ${OUT_PREFIX}/etc/php/php.ini composer.phar

cp $(dirname $BASH_SOURCE)/_conf/php/php.ini ${OUT_PREFIX}/etc/php/
cp $(dirname $BASH_SOURCE)/../../conf/php/php-fpm.conf ${OUT_PREFIX}/etc/php/

# this gets sourced after package install, so that the buildpack and following buildpacks can invoke
cat > ${OUT_PREFIX}/bin/export.php.sh <<'EOF'
export PATH="/app/.heroku/php/bin:/app/.heroku/php/sbin:$PATH"
EOF
# this gets sourced on dyno boot
cat > ${OUT_PREFIX}/bin/profile.php.sh <<'EOF'
export PATH="$HOME/.heroku/php/bin:$HOME/.heroku/php/sbin:$PATH"
EOF

python $(dirname $BASH_SOURCE)/_util/include/manifest.py "heroku-sys-php" "heroku-sys/${dep_name}" "$dep_version" "${dep_formula}.tar.gz" "$MANIFEST_REQUIRE" "$MANIFEST_CONFLICT" "$MANIFEST_REPLACE" "$MANIFEST_EXTRA" > $dep_manifest

print_or_export_manifest_cmd "$(generate_manifest_cmd "$dep_manifest")"
