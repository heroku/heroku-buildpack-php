#!/usr/bin/env bash

# bin/compile <build-dir> <cache-dir> <env-dir>

# fail hard
set -o pipefail
# fail harder
set -eu
# move hidden files too, just in case
shopt -s dotglob

BUILD_DIR=$1
CACHE_DIR=$2
# TODO: support UEC
# ENV_DIR=$3
BP_DIR=`cd $(dirname $0); cd ..; pwd`

# convenience functions
source $BP_DIR/bin/common.sh

cd $BUILD_DIR
mkdir -p .heroku/php

export COMPOSER_CMD='composer'
export COMPOSER_CACHE_DIR=$CACHE_DIR/php/composer
mkdir -p $COMPOSER_CACHE_DIR

PHP_VERSIONS="5.5.10"
if [ -f composer.json ]; then
    if [ ! -f composer.lock ]; then
        has_packages=$(cat composer.json | python -c 'import sys, json; print any(key.count("/") for key in json.load(sys.stdin)["require"])' 2> /dev/null || true) # might fail, set -e would stop execution
        if [ "$has_packages" == "True" ]; then
            error "Your composer.json specifies dependencies, but no composer.lock was found, please check it into your repository along with composer.json!"
        fi
    fi
    
    # FIXME: this would be, of course, very basic and doesn't support expressions; migrate to semver.org
    phpver="" #$(cat composer.json | python -c 'import sys, json; print json.load(sys.stdin)["require"]["php"]' 2> /dev/null)
    if [ ! -z $phpver ]; then
        if [[ $PHP_VERSIONS =~ $phpver ]]; then
            status "Detected request for PHP $phpver in composer.json."
            PHP_VERSION=$phpver
        else
            # TODO: fail harder?
            warning "Unknown PHP version in composer.json, will use default, install may fail!"
        fi
    fi
fi
# use first from PHP_VERSIONS as default
PHP_VERSIONS_ARR=($PHP_VERSIONS)
PHP_VERSION=${PHP_VERSION:-${PHP_VERSIONS_ARR[0]}}

PHP_DIST_URL="https://lang-php.s3.amazonaws.com/dist-alpha/php-$PHP_VERSION.tgz"
status "Installing PHP $PHP_VERSION..."
curl --silent --location "$PHP_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
echo $PHP_VERSION > $BUILD_DIR/.heroku/php_version

# update config files
cp $BP_DIR/conf/php.ini $BUILD_DIR/.heroku/php/etc
mkdir -p $BUILD_DIR/.heroku/php/etc/php/conf.d

# handle extensions
if [ -f composer.json ]; then
    exts=$(cat composer.json | python -c 'from __future__ import print_function; import sys, json; { print(key) for key in json.load(sys.stdin)["require"] if key.startswith("ext-")}' 2> /dev/null || true)
    if [ ! -z $exts ]; then
        status "Activating PHP extensions listed in composer.json:"
        while read -r ext; do
            if [ -f $BP_DIR/conf/php/conf.d/$ext.ini ]; then
                cp $BP_DIR/conf/php/conf.d/$ext.ini $BUILD_DIR/.heroku/php/etc/php/conf.d
                echo "- $ext" | indent
            else
                warning "Unknown extension $ext in composer.json, install may fail!"
            fi
        done <<< "$exts"
    fi
fi

if [ -f composer.lock ]; then
    # we need to run PHP in here, set it up!
    ln -s $BUILD_DIR/.heroku $HOME/.heroku
    export PATH=$HOME/.heroku/php/bin:$PATH
    
    status "Installing dependencies..."
    
    # check if we should use a composer.phar version bundled with the project
    if [ -f composer.phar ]; then
        COMPOSER_CMD="php composer.phar"
        warning "Found a composer.phar in app root, will use it for install."
        echo "Make sure this version of composer is up to date!" | indent
    else
        $COMPOSER_CMD self-update --no-interaction --quiet # TODO: specify a version once composer has stable releases
    fi

    # install dependencies
    $COMPOSER_CMD --version | indent
    $COMPOSER_CMD install --no-interaction | indent
fi

# Update the PATH
status "Building runtime environment..."
mkdir -p $BUILD_DIR/.profile.d
# look for composer.json, not composer.lock - maybe someone has a post-install-cmd, but no requires
cat > $BUILD_DIR/.profile.d/php.sh <<EOF
export PATH="\$HOME/.heroku/php/bin:\$PATH"
if [ -f composer.json ]; then
    $COMPOSER_CMD run-script post-install-cmd --no-interaction --quiet
fi
EOF
