#!/usr/bin/env bash

# bin/compile <build-dir> <cache-dir> <env-dir>

install_ext () {
    local ext=$1
    local reason=${2:-}
    local ext_ini="$bp_dir/conf/php/conf.d/ext-$ext.ini"
    local ext_so=
    local ext_dir=$(php-config --extension-dir)
    local ext_api=$(basename $ext_dir)
    if [[ -f "$ext_ini" ]]; then
        ext_so=$(php -r '$ini=parse_ini_file("'$ext_ini'"); echo $ext=$ini["zend_extension"]?:$ini["extension"]; exit((int)empty($ext));') # read .so name from .ini because e.g. opcache.so is named "zend-opcache"
        if [[ ! -f "$ext_dir/$ext_so" ]]; then
            warning_inline "Unknown extension ${ext} (${reason}), install may fail!"
        else
            echo "- ext-${ext} (${reason})" | indent
            cp "${ext_ini}" "${build_dir}/.heroku/php/etc/php/conf.d"
        fi
    elif [[ -f "${ext_dir}/${ext}.so" ]]; then
        echo "extension = ${ext}.so" > "${build_dir}/.heroku/php/etc/php/conf.d/ext-${ext}.ini"
        echo "- ext-${ext} (${reason})" | indent
    elif echo -n ${ext} | php -r 'exit((int)!extension_loaded(file_get_contents("php://stdin")));'; then
        : # echo "- ${ext} (${reason}; enabled by default)" | indent
    else
        warning_inline "Unknown extension ${ext} (${reason}), install may fail!"
    fi
}

# fail hard
set -o pipefail
# fail harder
set -eu
# move hidden files too, just in case
shopt -s dotglob

STACK=${STACK:-cedar} # Anvil has none
build_dir=$1
cache_dir=$2/php
mkdir -p "$cache_dir"
env_dir=${3:-} # Anvil has none
bp_dir=$(cd $(dirname $0); cd ..; pwd)

# convenience functions
source $bp_dir/bin/util/common.sh

# for extensions that need special treatment
source $bp_dir/bin/util/newrelic.sh
source $bp_dir/bin/util/blackfire.sh

# if this is set it prevents Git clones (e.g. for Composer installs from source) during the build in some circumstances, and it is set in SSH Git deploys to Heroku
unset GIT_DIR

export_env_dir "$env_dir" '^[A-Z_][A-Z0-9_]*$' '^(HOME|PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LD_LIBRARY_PATH|STACK|REQUEST_ID)$'

cd $build_dir

if [[ -n ${COMPOSER:-} ]]; then
    status "Using '$COMPOSER' (from "'$COMPOSER env var) for installation.'
else
    export COMPOSER="composer.json"
fi
export COMPOSER_LOCK=$(basename "$COMPOSER" ".json")".lock" # replace .json with .lock if it exists, append .lock otherwise

# a bunch of sanity checks first
if [[ -s "$COMPOSER" ]]; then
    cat "$COMPOSER" | python -mjson.tool &> /dev/null || error "Could not parse '$COMPOSER'; make sure it's valid!"
    if [[ ! -f "$COMPOSER_LOCK" ]]; then
        cat "$COMPOSER" | python -c 'import sys, json; sys.exit(bool(json.load(sys.stdin).get("require", {})))' 2> /dev/null || error "Your '$COMPOSER' lists dependencies inside 'require',
but no '$COMPOSER_LOCK' was found. Please run 'composer update' to
re-generate '$COMPOSER_LOCK' if necessary, and commit it into your
repository. For more information, please refer to the docs at
https://devcenter.heroku.com/articles/php-support#activation"
    else
        cat "$COMPOSER_LOCK" | python -mjson.tool &> /dev/null || error "Could not parse '$COMPOSER_LOCK'; make sure it's valid!"
        if [[ $(cat "$COMPOSER_LOCK" | python -c 'import sys, json; print json.load(sys.stdin)["hash"]' 2> /dev/null) != $(md5sum "$COMPOSER" | cut -d " " -f1) ]]; then
            warning "Your '$COMPOSER_LOCK' is not up to date with the latest
changes in '$COMPOSER'. To ensure you are not getting stale
dependencies, run 'composer update' on your machine and commit
any changes to Git before pushing again."
        fi
        cat "$COMPOSER_LOCK" | python -c 'import sys, json; l = json.load(sys.stdin); sys.exit(not(l["minimum-stability"] == "stable"));' 2> /dev/null || warning "Your '$COMPOSER' contains a non-'stable' setting
for 'minimum-stability'. This may cause the installation of
unstable versions of runtimes and extensions during this deploy.
It is recommended that you always use stability flags instead,
even if you have 'prefer-stable' enabled. For more information,
see https://getcomposer.org/doc/01-basic-usage.md#stability"
    fi
else
    if [[ ! -f "$COMPOSER" ]]; then
        warning "No '$COMPOSER' found.
Using 'index.php' to declare PHP applications is considered legacy
functionality and may lead to unexpected behavior."
    else
        notice "Your '$COMPOSER' is completely empty.
Please change its contents to at least '{}' so it is valid JSON."
    fi
    echo "{}" > $COMPOSER
fi

# all system packages live in there
mkdir -p $build_dir/.heroku/php
# set up Composer
export COMPOSER_HOME=$cache_dir/.composer
mkdir -p $COMPOSER_HOME
# we need to run things in /app because of compiled paths, set that up!
mkdir -p /app/.heroku
ln -s $build_dir/.heroku/php /app/.heroku/php
export PATH=/app/.heroku/php/bin:$PATH

status "Bootstrapping..."

s3_url="https://lang-php.s3.amazonaws.com/dist-${STACK}-master/"

# minimal PHP needed for installs, and make "composer" invocations use that for now
mkdir -p $build_dir/.heroku/php-min
ln -s $build_dir/.heroku/php-min /app/.heroku/php-min
curl --silent --location "${s3_url}php-min.tar.gz" | tar xz -C $build_dir/.heroku/php-min
curl --silent --location "${s3_url}composer-1.0.0alpha11.tar.gz" | tar xz -C $build_dir/.heroku/php
composer() {
    /app/.heroku/php-min/bin/php $(which composer) "$@"
}
export -f composer

# prepend the default repo to the list configured by the user
# list of repositories to use is in ascening order of precedence
HEROKU_PHP_PLATFORM_REPOSITORIES="${s3_url} ${HEROKU_PHP_PLATFORM_REPOSITORIES:-}"
if [[ "${HEROKU_PHP_PLATFORM_REPOSITORIES}" == *" - "* ]]; then
	# a single "-" in the user supplied string removes everything to the left of it; can be used to delete the default repo
	notice_inline "Default platform repository disabled."
	HEROKU_PHP_PLATFORM_REPOSITORIES=${HEROKU_PHP_PLATFORM_REPOSITORIES#*" - "}
fi

status "Installing platform packages..."

# extract requirements from composer.lock
/app/.heroku/php-min/bin/php -r '
// prefix keys with "heroku-sys/"
function mkreq($require) { return array_combine(array_map(function($v) { return "heroku-sys/$v"; }, array_keys($require)), $require); }
// check if require section demands a runtime
function hasreq($require) { return isset($require["php"]) || isset($require["hhvm"]); }
// filter platform reqs
$preqfilter = function($v) { return preg_match("#^(hhvm$|php(-64bit)?$|ext-)#", $v); };

// remove first arg (0)
array_shift($argv);
// base repos we need - no packagist, and the installer plugin path (first arg)
$repositories = [
    ["packagist" => false],
    ["type" => "path", "url" => array_shift($argv)],
];
// all other args are repo URLs; they get passed in ascending order of precedence, so we reverse
foreach(array_reverse($argv) as $repo) $repositories[] = ["type" => "composer", "url" => $repo];

$have_runtime_req = false;
if(file_exists(getenv("COMPOSER_LOCK"))) {
    $lock = json_decode(file_get_contents(getenv("COMPOSER_LOCK")), true);
    // basic lock file validity check
    if(!$lock || !isset($lock["platform"], $lock["packages"], $lock["hash"])) exit(1);
    $have_runtime_req |= hasreq($lock["platform"]);
    // for each package that has platform requirements we build a meta-package that we then depend on
    // we cannot simply join all those requirements together with " " or "," because of the precedence of the "|" operator: requirements "5.*," and "^5.3.9|^7.0", which should lead to a PHP 5 install, would combine into "5.*,^5.3.9|^7.0" (there is no way to group requirements), and that would give PHP 7
    $metapaks = [];
    // whatever is in the lock "platform" key will be turned into a meta-package too, named "composer.json/composer.lock"
    // this will result in an installer event for that meta-package, from which we can extract what extensions that are bundled (and hence "replace"d) with the runtime need to be enabled
    // if we do not do this, then a require for e.g. ext-curl or ext-mbstring in the main composer.json cannot be found by the installer plugin
    $root = [
        "name" => getenv("COMPOSER")."/".getenv("COMPOSER_LOCK"),
        "version" => "dev-".$lock["hash"],
        "require" => $lock["platform"],
    ];
    $lock["packages"][] = $root;
    $require[$root["name"]] = $root["version"];
    foreach($lock["packages"] as $package) {
        // extract only platform reqs
        $preq = array_filter(isset($package["require"]) ? $package["require"] : [], $preqfilter, ARRAY_FILTER_USE_KEY);
        if(!$preq) continue;
        $have_runtime_req |= hasreq($preq);
        $metapaks[] = [
            "type" => "metapackage",
            // we re-use the dep name and version, makes for nice error messages if dependencies cannot be fulfilled :)
            "name" => $package["name"],
            "version" => $package["version"],
            "require" => mkreq($preq),
        ];
        $require[$package["name"]] = $package["version"];
    }
    // add all meta-packages to one local package repo
    if($metapaks) $repositories[] = ["type" => "package", "package" => $metapaks];
}
// if no PHP or HHVM is required anywhere, we need to add something
if(!$have_runtime_req) {
    file_put_contents("php://stderr", "NOTICE: No runtime required in ".getenv("COMPOSER_LOCK")."; using PHP ". ($require["heroku-sys/php"] = "^5.5.17") . "\n");
} elseif(!isset($root["require"]["php"]) && !isset($root["require"]["hhvm"])) {
    file_put_contents("php://stderr", "NOTICE: No runtime required in ".getenv("COMPOSER")."; requirements\nfrom dependencies in ".getenv("COMPOSER_LOCK")." will be used for selection\n");
}
$json = [
    "config" => ["cache-files-ttl" => 0, "discard-changes" => true],
    "minimum-stability" => isset($lock["minimum-stability"]) ? $lock["minimum-stability"] : "stable",
    "prefer-stable" => isset($lock["prefer-stable"]) ? $lock["prefer-stable"] : false,
    "provide" => ["heroku-sys/".getenv("STACK") => "1.0.0"],
    "repositories" => $repositories,
    "require" => $require,
];
echo json_encode($json);
' -- "$bp_dir/support/installer/" $HEROKU_PHP_PLATFORM_REPOSITORIES 2>&1 >$build_dir/.heroku/php/composer.json | indent || error "Couldn't parse '$COMPOSER_LOCK'; it must be a valid lock
file generated by Composer. Run 'composer update', add/commit
the change, then push again."

if composer install -d "$build_dir/.heroku/php" --no-dev 2>&1 | tee $build_dir/.heroku/php/install.log | grep --line-buffered '  - Installing heroku-sys/' | sed -u 's/  - Installing heroku-sys\//- /' | indent; then
    :
else
    error "Failed to install system packages.

Your platform requirements (for runtimes and extensions) could
not be resolved to an installable set of dependencies, or a
repository was unreachable.

Full error information from installation attempt:

$(cat $build_dir/.heroku/php/install.log | sed -e 's/heroku-sys\///g' -e 's/^Loading composer repositories with package information/Loading repositories with available runtimes and extensions/' -e 's/^Installing dependencies.*//' -e '/^Potential causes:/,$d' -e 's/^/> /')

Please verify that all requirements for runtime versions in
'$COMPOSER_LOCK' are compatible with the list below, and ensure
all required extensions are available for the desired runtimes.

For reference, the following runtimes are currently available:

PHP:  $(composer show -d "$build_dir/.heroku/php" --available heroku-sys/php 2>&1 | sed -n 's/^versions : //p' | fold -s -w 58 || true)
HHVM: $(composer show -d "$build_dir/.heroku/php" --available heroku-sys/hhvm 2>&1 | sed -n 's/^versions : //p' | fold -s -w 58 || true)

For a list of supported runtimes & extensions on Heroku, please
refer to: https://devcenter.heroku.com/articles/php-support"
fi

if composer show -d "$build_dir/.heroku/php" --installed --quiet heroku-sys/php; then
    engine="php"
    engine_r="php -r"
    # update config files
    mkdir -p $build_dir/.heroku/php/etc/php
    cp $bp_dir/conf/php/php.ini $build_dir/.heroku/php/etc/php
    cp $bp_dir/conf/php/php-fpm.conf $build_dir/.heroku/php/etc/php
    mkdir -p $build_dir/.heroku/php/etc/php/conf.d
    # store PHP version in the slug for possible later evaluation
    mkdir -p $build_dir/.heroku/php/.versions/php
    composer show -d "$build_dir/.heroku/php" --installed heroku-sys/php 2> /dev/null | sed -n -e 's/^versions : \* //p' > $build_dir/.heroku/php/.versions/php/php
elif composer show -d "$build_dir/.heroku/php" --installed --quiet heroku-sys/hhvm; then
    engine="hhvm"
    engine_r="hhvm --php -r"
    # store HHVM version in the slug for possible later evaluation
    mkdir -p $build_dir/.heroku/php/.versions/hhvm
    # make HHVM accessible
    export PATH=$PATH:/app/.heroku/php/usr/bin
    # so it'll start. remember to use the full path to the binary, or we'll get an infinite loop
    hhvm() { LD_LIBRARY_PATH=/app/.heroku/php/usr/lib/x86_64-linux-gnu:/app/.heroku/php/usr/lib/hhvm:/app/.heroku/php/usr/lib `which hhvm` "$@"; }
    export -f hhvm
    composer show -d "$build_dir/.heroku/php" --installed heroku-sys/hhvm 2> /dev/null | sed -n -e 's/^versions : \* //p' > $build_dir/.heroku/php/.versions/hhvm/hhvm
fi

apache_version="2.4.16"
apache_dist_url="${s3_url}apache-$apache_version.tar.gz"
echo "- Apache ($apache_version)" | indent
curl --silent --location "$apache_dist_url" | tar xz -C $build_dir/.heroku/php
# Apache; copy in our config
cp $bp_dir/conf/apache2/httpd.conf.default $build_dir/.heroku/php/etc/apache2/httpd.conf
# store Apache version in the slug for possible later evaluation
mkdir -p $build_dir/.heroku/php/.versions/apache2
echo $apache_version > $build_dir/.heroku/php/.versions/apache2/apache2

nginx_version="1.8.0"
nginx_dist_url="${s3_url}nginx-$nginx_version.tar.gz"
echo "- Nginx ($nginx_version)" | indent
curl --silent --location "$nginx_dist_url" | tar xz -C $build_dir/.heroku/php
# nginx; copy in our config
cp $bp_dir/conf/nginx/nginx.conf.default $build_dir/.heroku/php/etc/nginx/nginx.conf
# store Nginx version in the slug for possible later evaluation
mkdir -p $build_dir/.heroku/php/.versions/nginx
echo $nginx_version > $build_dir/.heroku/php/.versions/nginx/nginx

# clean up
rm -rf /app/.heroku/php-min $build_dir/.heroku/php-min
unset -f composer

composer() {
    $engine `which composer` "$@"
}
export -f composer

# handle extensions for PHP
if [[ "$engine" == "php" ]]; then
    status "Enabling PHP extensions..."
    
    exts=()
    if [[ -f "$COMPOSER_LOCK" ]]; then
        exts=($(cat "$COMPOSER_LOCK" | python -c 'import sys, json, itertools; l=json.load(sys.stdin); print "\n".join(list(set(itertools.chain([plat[4:].lower() for plat in l.get("platform", []) if plat.startswith("ext-")], *[ [ pkg[4:].lower() for pkg in p.get("require", []) if pkg.startswith("ext-") ] for p in l.get("packages", []) ]))))' 2> /dev/null || true)) # convert to array
        ext_source="$COMPOSER_LOCK"
    fi
    for ext in "${!exts[@]}"; do # loop over keys in case the array is empty or else it'll error out
        install_ext "${exts[$ext]}" $ext_source
    done
    
    if [[ ${#exts[@]} -eq 0 || ! ${exts[*]} =~ "zend-opcache" ]]; then
        install_ext "zend-opcache" "automatic"
        exts+=("zend-opcache")
    fi
fi

status "Installing dependencies..."

# check if we should use a composer.phar version bundled with the project
if [[ -f "composer.phar" ]]; then
    [[ -x "composer.phar" ]] || error "File '/composer.phar' isn't executable; please 'chmod +x'!"
    $engine_r 'new Phar("composer.phar");' &> /dev/null || error "File '/composer.phar' is not a valid PHAR archive!"
    composer() {
        $engine composer.phar "$@"
    }
    export -f composer
    composer --version 2>&1 | grep "^Composer version" > /dev/null || error "File '/composer.phar' is not a Composer executable!"
    notice_inline "Using '/composer.phar' to install dependencies."
fi
# echo composer version for info purposes
# tail to get rid of outdated version warnings (Composer sends those to STDOUT instead of STDERR)
composer --version 2> /dev/null | tail -n 1 | indent

composer_vendordir=$(composer config vendor-dir 2> /dev/null | tail -n 1) # tail, as composer echos outdated version warnings to STDOUT
composer_bindir=$(composer config bin-dir 2> /dev/null | tail -n 1) # tail, as composer echos outdated version warnings to STDOUT

# throw a notice if people have added their vendor dir to Git; that's bad practice and makes everything slow and cluttered
if [[ -f "$composer_vendordir/autoload.php" && -d "$composer_vendordir/composer" ]]; then
    # we should not do this check separately; there is no reliable way of telling whether or not it really is the real Composer bin dir or if it comes from somewhere else
    composer_warn_bindir=""
    if [[ ! "$composer_bindir/" == "$composer_vendordir"/* && -d "$composer_bindir" ]]; then
        composer_warn_bindir="
Your Composer bin dir is configured to reside outside of vendor
dir, so please repeat the two steps above for '$composer_bindir/'."
    fi
    warning "Your Composer vendor dir is part of your Git repository.
This directory should not be under version control; only your
'$COMPOSER' and '$COMPOSER_LOCK' files should be added, which
will let Composer handle installation of dependencies on deploy.
To suppress this notice, first remove the folder from your index
by running 'git rm --cached $composer_vendordir/'.
Next, edit your project's '.gitignore' file and add the folder
'/$composer_vendordir/' to the list.$composer_warn_bindir
For more info, refer to the Composer FAQ: http://bit.ly/1rlCSZU"
fi

# handle custom oauth keys
COMPOSER_GITHUB_OAUTH_TOKEN=${COMPOSER_GITHUB_OAUTH_TOKEN:-}
if [[ -n "$COMPOSER_GITHUB_OAUTH_TOKEN" ]]; then
    if curl --fail --silent -H "Authorization: token $COMPOSER_GITHUB_OAUTH_TOKEN" https://api.github.com/rate_limit > /dev/null; then
        composer config -g github-oauth.github.com "$COMPOSER_GITHUB_OAUTH_TOKEN" &> /dev/null # redirect outdated version warnings (Composer sends those to STDOUT instead of STDERR)
        notice_inline 'Using $COMPOSER_GITHUB_OAUTH_TOKEN for GitHub OAuth.'
    else
        error 'Invalid $COMPOSER_GITHUB_OAUTH_TOKEN for GitHub OAuth!'
    fi
else
    # don't forget to remove any stored key if it's gone from the env
    composer config -g --unset github-oauth.github.com &> /dev/null # redirect outdated version warnings (Composer sends those to STDOUT instead of STDERR)
    if curl --silent https://api.github.com/rate_limit | python -c 'import sys, json; sys.exit((json.load(sys.stdin)["resources"]["core"]["remaining"] > 0))'; then # yes, check > 0, not < 1 - exit status of 0 will trigger the if
        notice "You've reached the GitHub API's request rate limit.
Composer will try and fall back to slower downloads from source.
It's strongly recommended you use a custom OAuth token; see
http://devcenter.heroku.com/articles/php-support#custom-github-oauth-tokens"
    fi
fi
# no need for the token to stay around in the env
unset COMPOSER_GITHUB_OAUTH_TOKEN

# install dependencies unless composer.json is completely empty (in which case it'd talk to packagist.org which may be slow and is unnecessary)
cat "$COMPOSER" | python -c 'import sys,json; sys.exit(not json.load(sys.stdin));' && composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction 2>&1 | indent

composer show --installed heroku/heroku-buildpack-php &> /dev/null && error "Your '$COMPOSER' requires 'heroku/heroku-buildpack-php'.
This package may only be used as a dependency in 'require-dev'!"

if cat "$COMPOSER" | python -c 'import sys,json; sys.exit("compile" not in json.load(sys.stdin).get("scripts", {}));'; then
    status "Running 'composer compile'..."
    composer run-script --no-dev --no-interaction compile 2>&1 | indent
fi

status "Preparing runtime environment..."

# install this buildpack like a composer package
# it will contain the apache/nginx/php configs and the boot script
# TODO: warn if require-dev has the package using a different branch
shopt -u dotglob # we don't want .git, .gitignore et al
# figure out the package dir name to write to and copy to it
hbpdir="$composer_vendordir/$(cat $bp_dir/composer.json | python -c 'import sys, json; print json.load(sys.stdin)["name"]')"
mkdir -p "$build_dir/$hbpdir"
cp -r "$bp_dir"/* "$build_dir/$hbpdir/"
# make bin dir, just in case
mkdir -p "$build_dir/$composer_bindir"
# figure out shortest relative path from vendor/heroku/heroku-buildpack-php to vendor/bin (or whatever the bin dir is)
relbin=$(python -c "import os.path; print os.path.relpath('$hbpdir', '$composer_bindir')")
# collect bin names from composer.json
relbins=$(cat $bp_dir/composer.json | python -c 'from __future__ import print_function; import sys, json; { print(sys.argv[1]+"/"+bin) for bin in json.load(sys.stdin)["bin"] }' $relbin)
# link to bins
cd $build_dir/$composer_bindir
ln -fs $relbins .
cd $build_dir

# Update the PATH
mkdir -p $build_dir/.profile.d
cat > $build_dir/.profile.d/php.sh <<"EOF"
export PATH="$HOME/.heroku/php/bin:$HOME/.heroku/php/sbin:$PATH"
EOF
if [[ $engine == "hhvm" ]]; then
    cat > $build_dir/.profile.d/hhvm.sh <<"EOF"
export PATH="$PATH:$HOME/.heroku/php/usr/bin"
hhvm() { LD_LIBRARY_PATH=$HOME/.heroku/php/usr/lib/x86_64-linux-gnu:$HOME/.heroku/php/usr/lib/hhvm:$HOME/.heroku/php/usr/lib `which hhvm` "$@"; }
export -f hhvm
EOF
fi
# Alias composer if needed
if [[ -f "composer.phar" ]]; then
    cat > $build_dir/.profile.d/composer.sh <<EOF
composer() {
    $engine composer.phar "\$@"
}
export -f composer
EOF
else
    cat > $build_dir/.profile.d/composer.sh <<EOF
composer() {
    $engine \`which composer\` "\$@"
}
export -f composer
EOF
fi

if [[ ! -f "Procfile" ]]; then
    echo "web: $composer_bindir/heroku-$engine-apache2" > Procfile
    notice_inline "No Procfile, using 'web: $composer_bindir/heroku-$engine-apache2'."
fi

status "Checking for additional extensions to install..."
# special treatment for Blackfire; we enable it if we detect a server id and a server token for it
install_blackfire_ext
install_blackfire_agent
# special treatment for New Relic; we enable it if we detect a license key for it
install_newrelic_ext
install_newrelic_daemon
install_newrelic_userini

# export for multi buildpack
cat > $bp_dir/export <<"EOF"
export PATH="/app/.heroku/php/bin:/app/.heroku/php/sbin:$PATH"
EOF
